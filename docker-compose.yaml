services:
  snapshotter-local-collector:
    image: ${SNAPSHOTTER_COLLECTOR_IMAGE:-ghcr.io/powerloom/snapshotter-lite-local-collector:dockerify}
    profiles: ["local-collector"]
    expose:
      - ${LOCAL_COLLECTOR_PORT:-50051}
    ports:
      - ${LOCAL_COLLECTOR_PORT:-50051}:${LOCAL_COLLECTOR_PORT:-50051}
    volumes:
      - ./logs/local-collector:/root/.pm2/logs
    environment:
      - SIGNER_ACCOUNT_ADDRESS=$SIGNER_ACCOUNT_ADDRESS
      - SIGNER_ACCOUNT_PRIVATE_KEY=$SIGNER_ACCOUNT_PRIVATE_KEY
      - IPFS_URL=$IPFS_URL
      - IPFS_API_KEY=$IPFS_API_KEY
      - IPFS_API_SECRET=$IPFS_API_SECRET
      - PROTOCOL_STATE_CONTRACT=$PROTOCOL_STATE_CONTRACT
      - DATA_MARKET_CONTRACT=$DATA_MARKET_CONTRACT
      - PROST_RPC_URL=$PROST_RPC_URL
      - PROST_CHAIN_ID=$PROST_CHAIN_ID
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - LOCAL_COLLECTOR_PORT=$LOCAL_COLLECTOR_PORT
      - RELAYER_PRIVATE_KEY=$RELAYER_PRIVATE_KEY
      - BLOCK_TIME=$BLOCK_TIME
      - MAX_STREAM_POOL_SIZE=$MAX_STREAM_POOL_SIZE
      - STREAM_POOL_HEALTH_CHECK_INTERVAL=$STREAM_POOL_HEALTH_CHECK_INTERVAL
    command:
      bash -c  "bash server_autofill.sh && bash init_processes.sh"
    networks:
      - custom_network
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
  snapshotter-core:
    image: ${SNAPSHOTTER_IMAGE:-ghcr.io/powerloom/snapshotter-core:dockerify}
    expose:
      - ${CORE_API_PORT:-8002}
    ports:
      - ${CORE_API_PORT-8002}:${CORE_API_PORT-8002}
    links:
      - "ipfs"
      - "redis"
      - "rabbitmq"
      - "snapshotter-local-collector"
    depends_on:
      - "redis"
      - "rabbitmq"
      - "snapshotter-local-collector"
    volumes:
      - ./logs/snapshotter:/logs
      - ./config:/config
      - ./computes:/computes
      - ./snapshotter:/snapshotter
    environment:
      - SIGNER_ACCOUNT_ADDRESS=$SIGNER_ACCOUNT_ADDRESS
      - SIGNER_ACCOUNT_PRIVATE_KEY=$SIGNER_ACCOUNT_PRIVATE_KEY
      - SLOT_ID=$SLOT_ID
      - SOURCE_RPC_URL=$SOURCE_RPC_URL
      - PROST_RPC_URL=$PROST_RPC_URL
      - IPFS_URL=$IPFS_URL
      - IPFS_API_KEY=$IPFS_API_KEY
      - IPFS_API_SECRET=$IPFS_API_SECRET
      - PROTOCOL_STATE_CONTRACT=$PROTOCOL_STATE_CONTRACT
      - DATA_MARKET_CONTRACT=$DATA_MARKET_CONTRACT
      - LOCAL_COLLECTOR_PORT=$LOCAL_COLLECTOR_PORT
      - SLACK_REPORTING_URL=$SLACK_REPORTING_URL
      - POWERLOOM_REPORTING_URL=$POWERLOOM_REPORTING_URL
      - WEB3_STORAGE_TOKEN=$WEB3_STORAGE_TOKEN
      - NAMESPACE=$NAMESPACE
      - TELEGRAM_REPORTING_URL=$TELEGRAM_REPORTING_URL
      - TELEGRAM_CHAT_ID=$TELEGRAM_CHAT_ID
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    command:
      bash -c "bash snapshotter_autofill.sh && bash init_processes.sh"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - custom_network
  ipfs:
    image: ipfs/kubo:master-latest
    profiles: ["ipfs"]
    environment:
      - IPFS_PROFILE=server
      - DATA_CLEANUP_DAYS=3
      - CLEANUP_SCHEDULE=0 */3 * * *
      - LIBP2P_FORCE_PNET=0
      - IPFS_ROUTING=dhtclient
    entrypoint: >
      /bin/sh -c '
      echo "Setting up data cleanup cron job...";
      mkdir -p /var/spool/cron/crontabs;
      cleanup_cmd="date && echo \"Starting hourly cleanup process...\" && find /data/ipfs -type f -mtime +$${DATA_CLEANUP_DAYS} -name \"*.data\" -print -delete && echo \"Hourly cleanup process completed.\"";
      echo "$${CLEANUP_SCHEDULE} $${cleanup_cmd} >> /proc/1/fd/1 2>&1" > /var/spool/cron/crontabs/root;
      chmod 0644 /var/spool/cron/crontabs/root;

      echo "Cron job set up. Will clean files older than $${DATA_CLEANUP_DAYS} days every hour ($${CLEANUP_SCHEDULE})";

      echo "Starting cron daemon...";
      crond;

      echo "Starting IPFS daemon...";
      exec /sbin/tini -- /usr/local/bin/start_ipfs daemon --migrate=true --agent-version-suffix=docker
      '
    volumes:
      - ./ipfs-data:/data/ipfs
      - ./ipfs-export:/export
    ports:
      - "4001:4001"  # Swarm listening port
      - "5001:5001"  # API server
      - "8080:8080"  # Gateway
    healthcheck:
      test: ["CMD", "ipfs", "id"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - custom_network
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
  redis:
    command: redis-server --appendonly yes
    image: "redis:alpine"
    expose:
      - 6379
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: on-failure
    networks:
      - custom_network
    volumes:
      - ./redis_data:/data
  rabbitmq:
    image: rabbitmq:3-management
    #command: ["daemon"]
    expose:
      - 15672
      - 5672
    ports:
      - 5672:5672
      - 15672:15672
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: on-failure
    networks:
      - custom_network
networks:
  custom_network:
    name: ${DOCKER_NETWORK_NAME}
    driver: bridge
    ipam:
      config:
        - subnet: ${DOCKER_NETWORK_SUBNET}
