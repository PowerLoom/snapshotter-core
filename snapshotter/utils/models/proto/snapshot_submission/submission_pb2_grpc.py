# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from snapshotter.utils.models.proto.snapshot_submission import submission_pb2 as snapshotter_dot_utils_dot_models_dot_proto_dot_snapshot__submission_dot_submission__pb2


class SubmissionStub(object):
    """Client-side interface for the Submission service."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubmitSnapshotSimulation = channel.stream_stream(
                '/submission.Submission/SubmitSnapshotSimulation',
                request_serializer=snapshotter_dot_utils_dot_models_dot_proto_dot_snapshot__submission_dot_submission__pb2.SnapshotSubmission.SerializeToString,
                response_deserializer=snapshotter_dot_utils_dot_models_dot_proto_dot_snapshot__submission_dot_submission__pb2.SubmissionResponse.FromString,
                )
        self.SubmitSnapshot = channel.stream_unary(
                '/submission.Submission/SubmitSnapshot',
                request_serializer=snapshotter_dot_utils_dot_models_dot_proto_dot_snapshot__submission_dot_submission__pb2.SnapshotSubmission.SerializeToString,
                response_deserializer=snapshotter_dot_utils_dot_models_dot_proto_dot_snapshot__submission_dot_submission__pb2.SubmissionResponse.FromString,
                )


class SubmissionServicer(object):
    """Server-side interface for the Submission service."""

    def SubmitSnapshotSimulation(self, request_iterator, context):
        """Handle incoming SubmitSnapshotSimulation requests.

        Args:
            request_iterator: An iterator of SnapshotSubmission messages.
            context: The RPC context.

        Raises:
            NotImplementedError: This method needs to be implemented.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubmitSnapshot(self, request_iterator, context):
        """Handle incoming SubmitSnapshot requests.

        Args:
            request_iterator: An iterator of SnapshotSubmission messages.
            context: The RPC context.

        Raises:
            NotImplementedError: This method needs to be implemented.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SubmissionServicer_to_server(servicer, server):
    """Register the SubmissionServicer with a gRPC server.

    Args:
        servicer: The SubmissionServicer instance.
        server: The gRPC server to which the servicer should be added.
    """
    rpc_method_handlers = {
            'SubmitSnapshotSimulation': grpc.stream_stream_rpc_method_handler(
                    servicer.SubmitSnapshotSimulation,
                    request_deserializer=snapshotter_dot_utils_dot_models_dot_proto_dot_snapshot__submission_dot_submission__pb2.SnapshotSubmission.FromString,
                    response_serializer=snapshotter_dot_utils_dot_models_dot_proto_dot_snapshot__submission_dot_submission__pb2.SubmissionResponse.SerializeToString,
            ),
            'SubmitSnapshot': grpc.stream_unary_rpc_method_handler(
                    servicer.SubmitSnapshot,
                    request_deserializer=snapshotter_dot_utils_dot_models_dot_proto_dot_snapshot__submission_dot_submission__pb2.SnapshotSubmission.FromString,
                    response_serializer=snapshotter_dot_utils_dot_models_dot_proto_dot_snapshot__submission_dot_submission__pb2.SubmissionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'submission.Submission', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class Submission(object):
    """Interface containing the methods of the Submission service."""

    @staticmethod
    def SubmitSnapshotSimulation(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        """Submit a snapshot simulation.

        Args:
            request_iterator: An iterator of SnapshotSubmission messages.
            target: The server address.
            options: An optional list of key-value pairs (channel args in gRPC runtime).
            channel_credentials: A ChannelCredentials instance.
            call_credentials: A CallCredentials instance.
            insecure: A boolean indicating whether the channel should be secure.
            compression: An optional grpc.Compression value.
            wait_for_ready: An optional boolean indicating whether the RPC should wait for the server to be ready.
            timeout: An optional duration of time in seconds.
            metadata: An optional sequence of metadata pairs.

        Returns:
            A generator of SubmissionResponse messages.
        """
        return grpc.experimental.stream_stream(request_iterator, target, '/submission.Submission/SubmitSnapshotSimulation',
            snapshotter_dot_utils_dot_models_dot_proto_dot_snapshot__submission_dot_submission__pb2.SnapshotSubmission.SerializeToString,
            snapshotter_dot_utils_dot_models_dot_proto_dot_snapshot__submission_dot_submission__pb2.SubmissionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubmitSnapshot(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        """Submit a snapshot.

        Args:
            request_iterator: An iterator of SnapshotSubmission messages.
            target: The server address.
            options: An optional list of key-value pairs (channel args in gRPC runtime).
            channel_credentials: A ChannelCredentials instance.
            call_credentials: A CallCredentials instance.
            insecure: A boolean indicating whether the channel should be secure.
            compression: An optional grpc.Compression value.
            wait_for_ready: An optional boolean indicating whether the RPC should wait for the server to be ready.
            timeout: An optional duration of time in seconds.
            metadata: An optional sequence of metadata pairs.

        Returns:
            A SubmissionResponse message.
        """
        return grpc.experimental.stream_unary(request_iterator, target, '/submission.Submission/SubmitSnapshot',
            snapshotter_dot_utils_dot_models_dot_proto_dot_snapshot__submission_dot_submission__pb2.SnapshotSubmission.SerializeToString,
            snapshotter_dot_utils_dot_models_dot_proto_dot_snapshot__submission_dot_submission__pb2.SubmissionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
